name = "argusai"
main = "src/index.ts"
compatibility_date = "2024-12-01"
compatibility_flags = ["nodejs_compat"]

# Base configuration - use environments for deployment-specific settings

[vars]
ENVIRONMENT = "production"
GITHUB_APP_ID = "1454778"
GITHUB_MODEL = "gpt-4o-mini"
LOG_LEVEL = "info"
MAX_DIFF_SIZE = "500000"  # 500KB default
CONCURRENT_FILE_REVIEWS = "3"  # Review 3 files in parallel
UPDATE_EXISTING_REVIEWS = "true"  # Update existing reviews instead of creating new ones

[observability]
enabled = true

# KV Namespaces
[[kv_namespaces]]
binding = "CACHE"
id = "df70afec18184e6da7a50bad00cbae45"

[[kv_namespaces]]
binding = "RATE_LIMITS"
id = "3f9fae87dddd4751823a13ce49dfa81c"

[[kv_namespaces]]
binding = "CONFIG"
id = "6155db907791462998569c559e71a8cd"

# OAuth namespaces
[[kv_namespaces]]
binding = "OAUTH_SESSIONS"
id = "placeholder-sessions-namespace-id"  # Replace with actual ID after creation

[[kv_namespaces]]
binding = "OAUTH_TOKENS"
id = "placeholder-tokens-namespace-id"  # Replace with actual ID after creation

# Free Tier: No queues needed
# Processing happens directly in webhook handler using event.waitUntil()

# R2 bucket for batch log storage (optional)
# Free tier: Use console.log() and wrangler tail for logging
# [[r2_buckets]]
# binding = "LOG_STORAGE"
# bucket_name = "argusai-logs"

# Service bindings (if using separate workers)
# [[services]]
# binding = "AUTH_SERVICE"
# service = "argusai-auth"
# environment = "production"

# Durable Objects (for advanced rate limiting)
# [[durable_objects.bindings]]
# name = "RATE_LIMITER"
# class_name = "RateLimiter"
# script_name = "argusai"

# Secrets (set with: wrangler secret put SECRET_NAME)
# Required secrets:
# - GITHUB_APP_PRIVATE_KEY: GitHub App private key for authentication
# - GITHUB_WEBHOOK_SECRET: Secret for validating webhook signatures
# - GITHUB_TOKEN: GitHub PAT with models:read permission
# Optional secrets:
# - SENTRY_DSN: For error tracking
# - SLACK_WEBHOOK_URL: For notifications

# Production environment configuration
[env.production]
name = "argusai-production"
routes = [
  { pattern = "argus.vogel.yoga/*", zone_name = "vogel.yoga" }
]

# Copy vars to production environment
[env.production.vars]
ENVIRONMENT = "production"
GITHUB_APP_ID = "1454778"
GITHUB_MODEL = "gpt-4o-mini"
LOG_LEVEL = "info"
MAX_DIFF_SIZE = "500000"  # 500KB default
CONCURRENT_FILE_REVIEWS = "3"  # Review 3 files in parallel
UPDATE_EXISTING_REVIEWS = "true"  # Update existing reviews instead of creating new ones

# Copy KV namespaces to production environment
[[env.production.kv_namespaces]]
binding = "CACHE"
id = "df70afec18184e6da7a50bad00cbae45"

[[env.production.kv_namespaces]]
binding = "RATE_LIMITS"
id = "3f9fae87dddd4751823a13ce49dfa81c"

[[env.production.kv_namespaces]]
binding = "CONFIG"
id = "6155db907791462998569c559e71a8cd"

[[env.production.kv_namespaces]]
binding = "OAUTH_SESSIONS"
id = "placeholder-sessions-namespace-id"  # Replace with actual ID after creation

[[env.production.kv_namespaces]]
binding = "OAUTH_TOKENS"
id = "placeholder-tokens-namespace-id"  # Replace with actual ID after creation

# Performance settings
[env.production.performance]
cpu_ms = 50  # Limit CPU time per request

# Development environment configuration
[env.development]
name = "argusai-dev"
vars = { ENVIRONMENT = "development", LOG_LEVEL = "debug" }

# Logpush configuration for better log collection
# Note: Logpush requires enterprise plan
# For free tier, use wrangler tail for real-time logs
